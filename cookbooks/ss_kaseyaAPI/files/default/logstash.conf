input {
  udp {
    port => 5656
    codec => netflow
    tags => ["netflow"]
    type => netflow
  }
  udp {
    port => 5657
    tags => ["udp"]
    type => draytekSyslog
  }
  syslog {
    port => 5658
    tags => ["syslog"]
    type => debianSyslog
  }
  file {
    path => "/var/log/logstash/getKaseyaData.json"
    codec => json
    tags => ["kaseya"]
    type => kaseyaAPI
  }
}

filter {
  if [type] == "kaseyaAPI" {
    geoip {
      add_tag => [ "GeoIPAPI" ]
      source => "ConnectionGatewayIp"
    }
    dns {
      add_tag => [ "DNSResolvAPI" ]
      reverse => [ "ConnectionGatewayIp" ]
      action => "replace"
    }
    mutate {
      add_tag => [ "changeFieldNames" ]
      convert => [ "lastReboot", "float" ]
      rename => [ "lastReboot", "uptime" ]
      rename => [ "lastCheckin", "diskused" ]
    }
  }

  if [type] == "netflow" {
    geoip {
      add_tag => [ "GeoIPNetFlow" ]
      source => "netflow.ipv4_dst_addr"
    }
  }

  if [type] == "draytekSyslog" {
    grok {
      match => ["message", "<%{INT:id}>%{SYSLOGTIMESTAMP} %{WORD:deviceName}: %{DATA:user} \(MAC=%{MAC}\): %{IP:source}:%{POSINT:sPort} -> %{IP:destination}:%{POSINT:dPort} \(%{WORD:protocol}\)"]
      match => ["message", "<%{INT:id}>%{SYSLOGTIMESTAMP} %{WORD:deviceName}: %{DATA:user}: %{IP:source}:%{POSINT:sPort} -> %{IP:destination}:%{POSINT:dPort} \(%{WORD:protocol}\) %{GREEDYDATA:action}"]
      match => ["message", "<%{INT:id}>%{SYSLOGTIMESTAMP} %{WORD:deviceName}: %{DATA:user}: %{WORD:interface}: Tx %{INT:tKbps30} Kbps, Rx %{INT:rKbps30} Kbps \(30 min"]
      match => ["message", "<%{INT:id}>%{SYSLOGTIMESTAMP} %{WORD:deviceName}: %{DATA:user}: %{WORD:interface}: Tx %{INT:tKbps5} Kbps, Rx %{INT:rKbps5} Kbps \(5 min"]
      match => ["message", "<%{INT:id}>%{SYSLOGTIMESTAMP} %{WORD:deviceName}:"]
    }
    geoip {
      add_tag => [ "GeoIPSyslog" ]
      source => "destination"
    }

    dns {
      add_tag => [ "DNSResolvDest" ]
      reverse => [ "destination" ]
      action => "replace"
    }

    dns {
      add_tag => [ "DNSResolvSource" ]
      reverse => [ "source" ]
      action => "replace"
    }

    mutate {
      convert => [ "tKbps5", "integer" ]
      convert => [ "rKbps5", "integer" ]
      convert => [ "tKbps30", "integer" ]
      convert => [ "rKbps30", "integer" ]
      convert => [ "timeAvg", "integer" ]
      convert => [ "dPort", "integer" ]
      convert => [ "sPort", "integer" ]
    }
  }
}

output {
  stdout { }
  elasticsearch{
    host => "127.0.0.1"
    protocol => "http"
    }
}
